name: Laravel 3-Tier GitHub Action with CI/CD

on:
  push:
    branches:
      - master

jobs:
  laravel:
    name: Laravel (PHP 8.2)
    runs-on: ubuntu-latest
    env:
      DB_DATABASE: ${{ secrets.DB_DATABASE }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      BROADCAST_DRIVER: log
      CACHE_DRIVER: redis
      QUEUE_CONNECTION: redis
      SESSION_DRIVER: redis
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: false
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.DB_DATABASE }}
        ports:
          - 3306/tcp
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis
        ports:
          - 6379/tcp
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
        
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: sqlite, pdo_sqlite, pcntl, zip, intl, exif, mbstring, dom, fileinfo, mysql, dom
          coverage: xdebug

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Prepare Laravel Application
        run: |
          php -r "file_exists('.env') || copy('.env.example', '.env');"
          php artisan key:generate

      - name: Clear Config
        run: php artisan config:clear

      - name: Test with phpunit
        run: vendor/bin/phpunit --coverage-text
        env:
          DB_PORT: ${{ job.services.mysql.ports['3306'] }}
          REDIS_PORT: ${{ job.services.redis.ports['6379'] }}


      - name: Deploy to server via SCP
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USERNAME: ubuntu
          SSH_PORT: ${{ secrets.SSH_PORT }}
          REMOTE_DIR: /var/www/html
        run: |
          echo "$SSH_PRIVATE_KEY" > key.pem
          chmod 600 key.pem
          mkdir -p ~/.ssh
          ssh-keyscan -p $SSH_PORT $SSH_HOST >> ~/.ssh/known_hosts
          ssh -i key.pem -p $SSH_PORT ubuntu@$SSH_HOST "sudo apt-get update && sudo apt-get install -y php-xml"
          ssh -i key.pem -p $SSH_PORT ubuntu@$SSH_HOST "sudo chown -R ubuntu:ubuntu $REMOTE_DIR"
          scp -i key.pem -P $SSH_PORT -r ./* ubuntu@$SSH_HOST:$REMOTE_DIR
          ssh -i key.pem -p $SSH_PORT ubuntu@$SSH_HOST "chmod +x $REMOTE_DIR/scripts/deploy.sh"
          ssh -i key.pem -p $SSH_PORT ubuntu@$SSH_HOST "cd $REMOTE_DIR && ./scripts/deploy.sh"
